package app;

import java.awt.Color;
import java.awt.Font;
import java.util.HashMap;

import javax.swing.JOptionPane;

import com.fasterxml.jackson.databind.ObjectMapper;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JPasswordField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Abby
 */
public class ADUpdatePasswordScreen extends javax.swing.JFrame {

    /**
     * Creates new form ADUpdatePasswordScreen
     */
    public ADUpdatePasswordScreen() {
        initComponents();
        
        Color x = new Color(32, 55, 73);
        this.getContentPane().setBackground(x);
        
        Color y = new Color(205, 0, 69);
        updateButton.setBackground(y);
        
        Color z = new Color(102, 102, 102);
        cancelButton.setBackground(z);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updatePasswordLabel = new javax.swing.JLabel();
        oldPasswordLabel = new javax.swing.JLabel();
        newPasswordLabel = new javax.swing.JLabel();
        reenterPasswordLabel = new javax.swing.JLabel();
        updateButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Update Password");
        setResizable(false);

        updatePasswordLabel.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        updatePasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        updatePasswordLabel.setText("UPDATE PASSWORD");

        oldPasswordLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        oldPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        oldPasswordLabel.setText("Old Password");

        newPasswordLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        newPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        newPasswordLabel.setText("New Password");

        reenterPasswordLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        reenterPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        reenterPasswordLabel.setText("Re-enter Password");

        updateButton.setBackground(new java.awt.Color(205, 0, 69));
        updateButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("Update");
        updateButton.setBorder(null);
        updateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(102, 102, 102));
        cancelButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("");
        cancelButton.setBorder(null);
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        
        oldPasswordField = new JPasswordField();
        oldPasswordField.setToolTipText("Password");
        oldPasswordField.setForeground(Color.BLACK);
        oldPasswordField.setFont(new Font("Calibri", Font.PLAIN, 12));
        oldPasswordField.setEchoChar('*');
        
        newPasswordField = new JPasswordField();
        newPasswordField.setToolTipText("Password");
        newPasswordField.setForeground(Color.BLACK);
        newPasswordField.setFont(new Font("Calibri", Font.PLAIN, 12));
        newPasswordField.setEchoChar('*');
        
        reenterPasswordField = new JPasswordField();
        reenterPasswordField.setToolTipText("Password");
        reenterPasswordField.setForeground(Color.BLACK);
        reenterPasswordField.setFont(new Font("Calibri", Font.PLAIN, 12));
        reenterPasswordField.setEchoChar('*');

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(115, Short.MAX_VALUE)
        			.addComponent(updatePasswordLabel)
        			.addGap(106))
        		.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        			.addGap(63)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(newPasswordField, GroupLayout.PREFERRED_SIZE, 226, GroupLayout.PREFERRED_SIZE)
        					.addContainerGap())
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(oldPasswordField, Alignment.LEADING)
        						.addGroup(Alignment.LEADING, layout.createParallelGroup(Alignment.TRAILING)
        							.addComponent(oldPasswordLabel, Alignment.LEADING)
        							.addComponent(newPasswordLabel, Alignment.LEADING)
        							.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        								.addComponent(updateButton, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
        								.addPreferredGap(ComponentPlacement.UNRELATED)
        								.addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE))
        							.addGroup(Alignment.LEADING, layout.createSequentialGroup()
        								.addGap(2)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(reenterPasswordField, GroupLayout.PREFERRED_SIZE, 226, GroupLayout.PREFERRED_SIZE)
        									.addComponent(reenterPasswordLabel)))))
        					.addContainerGap(62, GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(41)
        			.addComponent(updatePasswordLabel)
        			.addGap(31)
        			.addComponent(oldPasswordLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(oldPasswordField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(newPasswordLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(newPasswordField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addComponent(reenterPasswordLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(reenterPasswordField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(updateButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
        			.addGap(40))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
    	HashMap map;
        if(!oldPasswordField.getText().equals("") && !newPasswordField.getText().equals("") && !reenterPasswordField.getText().equals(""))
        {
        	if(newPasswordField.getText().length() >= 8 && newPasswordField.getText().length() <= 25 && reenterPasswordField.getText().length() >= 8 && reenterPasswordField.getText().length() <= 25)
        	{
        		try{
	            	String username = ADUsersTab.getData();
	                String oldPassword = oldPasswordField.getText();
	                String newPassword = newPasswordField.getText();
	                String newPassword2 = reenterPasswordField.getText();
	                
	
	                try{
	                    map = doCommand("updatePassword", username, oldPassword, newPassword, newPassword2);
	                    
	                }
	                catch (Exception e){
	                    e.printStackTrace();
	                }
	                
	                cancelButton.setEnabled(false);
	                
	            	this.dispose();
	            	ADUsersTab a = new ADUsersTab();
	            	a.setVisible(true);
	            }
	            catch (Exception e){
	                e.printStackTrace();
	            }
        	}
        	else if (newPasswordField.getText().length() < 8 || newPasswordField.getText().length() > 25){
        		JOptionPane.showMessageDialog(null, "New password should contain 8-25 characters.", "Error", JOptionPane.ERROR_MESSAGE);
        	}
        	else{
        		JOptionPane.showMessageDialog(null, "Invalid input.", "Error", JOptionPane.ERROR_MESSAGE);
        	}
    	  }
        else{
    		JOptionPane.showMessageDialog(null, "Missing input", "Error", JOptionPane.ERROR_MESSAGE);
    	}     
        
    }

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    	this.dispose();
    	ADUsersTab a = new ADUsersTab();
    	a.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ADUpdatePasswordScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ADUpdatePasswordScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ADUpdatePasswordScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ADUpdatePasswordScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ADUpdatePasswordScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JLabel oldPasswordLabel;
    private javax.swing.JLabel reenterPasswordLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel updatePasswordLabel;
    private JPasswordField oldPasswordField;
    private JPasswordField newPasswordField;
    private JPasswordField reenterPasswordField;
    // End of variables declaration//GEN-END:variables
    
    private HashMap doCommand(String command, String username, String oldPassword, String newPassword, String newPassword2) throws Exception
    {
        String url1 = "http://localhost:8080/"+command;
        
        HashMap<String, Object> map = new HashMap<String, Object>();

        map.put("username", username);
        map.put("oldPassword", oldPassword);
        map.put("newPassword", newPassword);
        map.put("newPassword2", newPassword2);

        
        // CONVERT JAVA DATA TO JSON
        ObjectMapper mapper = new ObjectMapper();
        String json1 = mapper.writeValueAsString(map);
        
        
        // SEND TO SERVICE
        String reply = NetUtil.postJsonDataToUrl(url1, json1);
        System.out.println("REPLY = "+reply);
        
        
        try
        {
            // CONVERT REPLY JSON STRING TO A JAVA OBJECT 
            HashMap replyMap = (HashMap) mapper.readValue(reply, HashMap.class);
            return replyMap;
        }
        catch(Exception e)
        {
            //System.out.println(reply);
            HashMap replyMap = new HashMap();
            replyMap.put("message", reply);
            return replyMap;
            
        }
    }


    private static void printMessage(HashMap map)
    {
        System.out.println(map.get("message"));
    }

}
