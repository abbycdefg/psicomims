package app;

import java.awt.Color;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

import com.fasterxml.jackson.databind.ObjectMapper;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

import java.awt.Frame;
import java.awt.ComponentOrientation;
import java.awt.Rectangle;
import java.awt.Cursor;

import javax.swing.JFrame;
import javax.swing.JTextField;
import javax.swing.JLabel;

import java.awt.Font;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Abby
 */
public class DCAddBookScreen extends javax.swing.JFrame {

	String prevPage;
	
    /**
     * Creates new form DCAddBookScreen
     */
    public DCAddBookScreen(String page) {
    	
    	prevPage = page;
    	
    	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    	setAlwaysOnTop(true);
    	setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    	setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    	setBounds(new Rectangle(0, 0, 4, 4));
    	getContentPane().setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
    	setExtendedState(Frame.MAXIMIZED_BOTH);
        initComponents();
        
        Color x = new Color(32, 55, 73);
        this.getContentPane().setBackground(x);
        
        Color y = new Color(205, 0, 69);
        addButton.setBackground(y);
        
        Color z = new Color(102, 102, 102);
        cancelButton.setBackground(z);
        
        Date now = new Date();
        releaseDateChooser.setDate(now);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        authorField = new javax.swing.JTextField();
        authorLabel = new javax.swing.JLabel();
        itemCodeField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        priceLabel = new javax.swing.JLabel();
        itemCodeLabel = new javax.swing.JLabel();
        titleField = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();
        addBookLabel = new javax.swing.JLabel();
        releaseDateLabel = new javax.swing.JLabel();
        releaseDateChooser = new com.toedter.calendar.JDateChooser();
        setTitle("Add Book");
        setResizable(false);

        cancelButton.setBackground(new java.awt.Color(102, 102, 102));
        cancelButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(255, 255, 255));
        cancelButton.setText("Cancel");
        cancelButton.setBorder(null);
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(205, 0, 69));
        addButton.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("Add Book");
        addButton.setBorder(null);
        addButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        authorField.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        authorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorFieldActionPerformed(evt);
            }
        });

        authorLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        authorLabel.setForeground(new java.awt.Color(255, 255, 255));
        authorLabel.setText("Author");

        itemCodeField.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        itemCodeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCodeFieldActionPerformed(evt);
            }
        });

        priceField.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        priceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceFieldActionPerformed(evt);
            }
        });

        priceLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        priceLabel.setForeground(new java.awt.Color(255, 255, 255));
        priceLabel.setText("Price");

        itemCodeLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        itemCodeLabel.setForeground(new java.awt.Color(255, 255, 255));
        itemCodeLabel.setText("Item Code");

        titleField.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        titleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleFieldActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Title");

        addBookLabel.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        addBookLabel.setForeground(new java.awt.Color(255, 255, 255));
        addBookLabel.setText("ADD BOOK");

        releaseDateLabel.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        releaseDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        releaseDateLabel.setText("Release Date");
        
        thresholdTextField = new JTextField();
        thresholdTextField.setColumns(10);
        
        JLabel lblThreshold = new JLabel("Threshold");
        lblThreshold.setForeground(Color.WHITE);
        lblThreshold.setFont(new Font("Calibri", Font.PLAIN, 15));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(69, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(addBookLabel)
        					.addGap(199))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(addButton, GroupLayout.PREFERRED_SIZE, 167, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 167, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createParallelGroup(Alignment.LEADING)
        							.addComponent(titleField)
        							.addGroup(layout.createSequentialGroup()
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(itemCodeLabel)
        									.addComponent(itemCodeField, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE))
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(priceLabel)
        									.addComponent(priceField, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)))
        							.addComponent(authorLabel)
        							.addComponent(authorField)
        							.addComponent(titleLabel)
        							.addGroup(layout.createSequentialGroup()
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(releaseDateChooser, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
        									.addComponent(releaseDateLabel))
        								.addPreferredGap(ComponentPlacement.RELATED)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(lblThreshold)
        									.addComponent(thresholdTextField, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)))))
        					.addGap(67))))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(40)
        			.addComponent(addBookLabel)
        			.addGap(31)
        			.addComponent(titleLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(titleField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(priceLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        				.addComponent(itemCodeLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(itemCodeField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        				.addComponent(priceField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addComponent(authorLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(authorField, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(releaseDateLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblThreshold))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(thresholdTextField)
        				.addComponent(releaseDateChooser, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        			.addGap(23)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(addButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
        				.addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(35, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        DCBooksTab a = new DCBooksTab("");
                
        if (prevPage.equals("")){
        	a = new DCBooksTab("");
       	}
    	else if (prevPage.equals("ad")){
    		a = new DCBooksTab("ad");
     	}
        
        a.setVisible(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        HashMap map;
        
        try{
        	
        	String itemCode = "";
            String price = "";
            String threshold = "";
            boolean go = true;
             
            String title = titleField.getText();
            String author = authorField.getText();
            if( title.equals("") || author.equals("") || itemCodeField.getText().equals("")|| priceField.getText().equals("")||thresholdTextField.getText().equals("")) {
         	   go = false;
              JOptionPane.showMessageDialog(null, "All fields must be filled", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else {
	            if(checkCode(itemCodeField.getText()) == true && checkCharacters(itemCodeField.getText()) == false ) {
	            	itemCode = itemCodeField.getText();
	            }
	            else {
	            	 go = false;
	            	 JOptionPane.showMessageDialog(null, "Please enter a numeric item code value.", "Error", JOptionPane.ERROR_MESSAGE);
	            }
	            if(checkNumber(thresholdTextField.getText()) == true && checkCharacters(thresholdTextField.getText()) == false ) {
	            	threshold = thresholdTextField.getText();
	            }
	            else {
	            	 go = false;
	            	 JOptionPane.showMessageDialog(null, "Please enter a numeric threshold value.", "Error", JOptionPane.ERROR_MESSAGE);
	            }
	           	if(checkPrice(priceField.getText()) == true && checkCharacters(priceField.getText()) == false ) {
	           		price = priceField.getText();
	           	}
	            else {
	           	 go = false;
	           	 JOptionPane.showMessageDialog(null, "Please enter a numeric price value.", "Error", JOptionPane.ERROR_MESSAGE);
	           }
            }
      
            DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
            java.util.Date releaseDate = releaseDateChooser.getDate();
            String releaseDateStr = df.format(releaseDate);
            

            try{
            	if(go == true) {
	                map = doCommand("addBook", title, itemCode, price, author, releaseDateStr, threshold);
	            	this.dispose();
	            	DCBooksTab a = new DCBooksTab("");
	              	
	                if (prevPage.equals("")){
	                	a = new DCBooksTab("");
	   	         	}
	   	         	else if (prevPage.equals("ad")){
	   	         		a = new DCBooksTab("ad");
	   	         	}
	                
	                a.setVisible(true);
            	}
                
            }
            catch (Exception e){
                e.printStackTrace();
            }
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void authorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_authorFieldActionPerformed

    private void itemCodeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCodeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itemCodeFieldActionPerformed

    private void priceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceFieldActionPerformed

    private void titleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DCAddBookScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DCAddBookScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DCAddBookScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DCAddBookScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DCAddBookScreen("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addBookLabel;
    private javax.swing.JButton addButton;
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField itemCodeField;
    private javax.swing.JLabel itemCodeLabel;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private com.toedter.calendar.JDateChooser releaseDateChooser;
    private javax.swing.JLabel releaseDateLabel;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel titleLabel;
    private JTextField thresholdTextField;
    // End of variables declaration//GEN-END:variables
    

    private HashMap doCommand(String command, String title, String itemCode, String price, String author, String releaseDate, String threshold ) throws Exception
    {
        String url1 = "http://localhost:8080/"+command;
        
        HashMap<String, Object> map = new HashMap<String, Object>();

        map.put("title", title);
        map.put("itemCode", itemCode);
        map.put("price", price);
        map.put("author", author);
        map.put("releaseDate", releaseDate);
        map.put("threshold", threshold);
        
        // CONVERT JAVA DATA TO JSON
        ObjectMapper mapper = new ObjectMapper();
        String json1 = mapper.writeValueAsString(map);
        
        
        // SEND TO SERVICE
        String reply = NetUtil.postJsonDataToUrl(url1, json1);
        System.out.println("REPLY = "+reply);
        
        
        try
        {
            // CONVERT REPLY JSON STRING TO A JAVA OBJECT 
            HashMap replyMap = (HashMap) mapper.readValue(reply, HashMap.class);
            return replyMap;
        }
        catch(Exception e)
        {
            //System.out.println(reply);
            HashMap replyMap = new HashMap();
            replyMap.put("message", reply);
            return replyMap; 
        }
    }
    
    private boolean checkNumber(String text) {
    	try{
    		 Integer.parseInt( text );
    	      return true;
    	}
    	catch (Exception e){
    		return false;
    	}
    }
    private boolean checkCode(String text) {
    	try{
    		 Long.parseLong( text );
    	      return true;
    	}
    	catch (Exception e){
    		return false;
    	}
    }
    private boolean checkPrice(String text) {
    	try{
    		 Double.parseDouble( text );
    	      return true;
    	}
    	catch (Exception e){
    		return false;
    	}
    }
    
    private boolean checkCharacters(String text) {
    	try{
    		String thePattern = "[^A-Za-z0-9]+"; 
    		Pattern.compile(thePattern).matcher(text).find();
    	      return false;
    	}
    	catch (Exception e){
    		return true;
    	}
    }
}
